name: Hog-tag

on:
  workflow_call:
    inputs:
      HOG_CREATE_OFFICIAL_RELEASE:
        required: false
      HOG_OFFICIAL_BIN_EOS_PATH:
        required: false
      HOG_USE_DOXYGEN:
        required: false
      HOG_CHECK_PROJVER:
        required: false
    secrets:
      SUBMODULE_CONTENT_PULL_KEY:
        required: true
      HOG_PUSH_TOKEN:
        required: true
      HOG_EMAIL:
        required: true
      HOG_USER:
        required: true
      EOS_PASSWORD:
        required: false
      EOS_USER:
        required: false

env:
  HOG_PUSH_TOKEN: ${{ secrets.HOG_PUSH_TOKEN }}
  GITHUB_API_URL: ${{ github.api_url }}
  REPO: ${{ github.repository }}
  HOG_USER: ${{ secrets.HOG_USER }}
  HOG_EMAIL: ${{ secrets.HOG_EMAIL }}
  SOURCE_BRANCH: ${{ github.head_ref }}

jobs:
  archive_binary_files:
    runs-on: ubuntu-latest
    container: gitlab-registry.cern.ch/hog/hog-docker:tclsh
    if: ${{ inputs.HOG_CREATE_OFFICIAL_RELEASE == '1' || inputs.HOG_OFFICIAL_BIN_EOS_PATH != "" }}
    steps:
      - uses: actions/checkout@v2
        with: 
          fetch-depth: 0
      - uses: webfactory/ssh-agent@v0.5.4
        with:
            ssh-private-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
      - name: archive
        run: |
          git config --global user.email "$HOG_EMAIL"
          git config --global user.name "$HOG_USER"
          git fetch 
          git checkout $SOURCE_BRANCH
          git pull
          if [[ -v "${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH }}" ]]; then
            until echo $EOS_PASSWORD | kinit $EOS_USER@CERN.CH; do
            echo Retrying;
            sleep 2;
            done;
          fi;
          git fetch origin refs/notes/*:refs/notes/*
          RUNID=( `git notes show` )
          if [[ "${{ inputs.HOG_USE_DOXYGEN }}" == "1" ]]; then
            ./Hog/Other/GetArtifactsAndRename.sh -token $HOG_PUSH_TOKEN -url $GITHUB_API_URL -proj_id $REPO -mr $RUNID -doxygen -github ;
            if [[ -v "${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH }}" ]]; then
              echo "Copying Doxygen documentation to ${HOG_OFFICIAL_BIN_EOS_PATH}/Doc";
              eos mkdir -p ${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH }}/Doc;
              xrdcp -rsf Doc/html/* ${EOS_MGM_URL}//${HOG_OFFICIAL_BIN_EOS_PATH}/Doc;
            fi;
          else
            ./Hog/Other/GetArtifactsAndRename.sh -token $HOG_PUSH_TOKEN -url $GITHUB_API_URL -proj_id $REPO -mr $RUNID -github;
          fi
          mkdir zipped
          cd bin
          projects=$(find . -name "*.bit" -o -name "*.pof")
          for proj in $projects; do
            PRJ_DIR=$(dirname "$proj");
            PRJ_DIR=$(echo "$PRJ_DIR" | sed -r 's#\./##g');
            DEST_ZIP=$(echo "$PRJ_DIR" | sed -r 's#/#_#g');
            echo "Archiving $PRJ_DIR into $HOG_MAX_ZIP_SIZE";
            zip -r -q -s $HOG_MAX_ZIP_SIZE ../zipped/$DEST_ZIP.zip $PRJ_DIR;
          done
          cd ..
          if [[ ${{ inputs.HOG_CREATE_OFFICIAL_RELEASE }} == "1" ]]; then
            if [[ ${{ inputs.HOG_CHECK_PROJVER == '1' }} ]]; then
                tclsh ./Hog/Tcl/CI/get_binary_links.tcl $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_PROJECT_URL $CI_COMMIT_TAG "$HOG_EXTERNAL_PATH";
            else
                tclsh ./Hog/Tcl/CI/get_binary_links.tcl -force $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_PROJECT_URL $CI_COMMIT_TAG "$HOG_EXTERNAL_PATH";
            fi;
            ./Hog/Other/MakeGitlabRelease.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_COMMIT_TAG bin/note.md -load_artifacts;
          fi;



